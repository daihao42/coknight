# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import utils.rpcenv_pb2 as rpcenv__pb2


class RPCActorInferenceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamingInference = channel.unary_unary(
                '/rpcenv.RPCActorInference/StreamingInference',
                request_serializer=rpcenv__pb2.Step.SerializeToString,
                response_deserializer=rpcenv__pb2.Action.FromString,
                )


class RPCActorInferenceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamingInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RPCActorInferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamingInference': grpc.unary_unary_rpc_method_handler(
                    servicer.StreamingInference,
                    request_deserializer=rpcenv__pb2.Step.FromString,
                    response_serializer=rpcenv__pb2.Action.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcenv.RPCActorInference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RPCActorInference(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamingInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcenv.RPCActorInference/StreamingInference',
            rpcenv__pb2.Step.SerializeToString,
            rpcenv__pb2.Action.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RPCModelUpdateStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamingModelUpdate = channel.unary_unary(
                '/rpcenv.RPCModelUpdate/StreamingModelUpdate',
                request_serializer=rpcenv__pb2.Pull.SerializeToString,
                response_deserializer=rpcenv__pb2.Model.FromString,
                )


class RPCModelUpdateServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamingModelUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RPCModelUpdateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamingModelUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.StreamingModelUpdate,
                    request_deserializer=rpcenv__pb2.Pull.FromString,
                    response_serializer=rpcenv__pb2.Model.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcenv.RPCModelUpdate', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RPCModelUpdate(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamingModelUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcenv.RPCModelUpdate/StreamingModelUpdate',
            rpcenv__pb2.Pull.SerializeToString,
            rpcenv__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UploadTrajectoryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrajectoryUpload = channel.unary_unary(
                '/rpcenv.UploadTrajectory/TrajectoryUpload',
                request_serializer=rpcenv__pb2.Trajectory.SerializeToString,
                response_deserializer=rpcenv__pb2.Uploaded.FromString,
                )


class UploadTrajectoryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrajectoryUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UploadTrajectoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrajectoryUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.TrajectoryUpload,
                    request_deserializer=rpcenv__pb2.Trajectory.FromString,
                    response_serializer=rpcenv__pb2.Uploaded.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcenv.UploadTrajectory', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UploadTrajectory(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrajectoryUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcenv.UploadTrajectory/TrajectoryUpload',
            rpcenv__pb2.Trajectory.SerializeToString,
            rpcenv__pb2.Uploaded.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
